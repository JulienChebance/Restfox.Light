name: Create new Windows Light release

on:
  workflow_dispatch:
  schedule:
    - cron: "50 3 * * *"

env:
  APP_TITLE: "A powerful minimalistic HTTP client"
  APP_PRODUCT: "Restfox"
  APP_COPYRIGHT: "Copyright (c) 2022 Flawid D'Souza - Copyright (c) 2024+ Julien Chebance"
  APP_SPAMODE: "true"
  APP_STARTMAXIMIZED: "false"
  APP_KIOSK: "false"
  APP_MULTIPLEINSTANCE: "unique"
  APP_STATELESS: "false"
  DIST_DIR: Restfox/packages/ui/dist

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.check.outputs.latest_version }}
      latest_version_plain: ${{ steps.check.outputs.latest_version_plain }}
      new_release: ${{ steps.check.outputs.new_release }}
    steps:
      - id: distant
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: flawiddsouza/Restfox
          excludes: prerelease, draft
      - id: local
        name: Compare versions
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: JulienChebance/Restfox.Light

      - id: check
        run: |
          if [ "${{ steps.distant.outputs.release }}" != "${{ steps.local.outputs.release }}" ]; then
            plain=$(echo "${{ steps.distant.outputs.release }}" | sed 's/^v//')
            echo "latest_version=${{ steps.distant.outputs.release }}" >> $GITHUB_OUTPUT
            echo "latest_version_plain=$plain" >> $GITHUB_OUTPUT
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "➡️ New release found: ${{ steps.distant.outputs.release }}"
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
            echo "✅ Already up to date"
          fi

  build-release:
    runs-on: windows-latest
    permissions:
      contents: write
    needs: check-version
    if: needs.check-version.outputs.new_release == 'true'
    steps:
      - name: Checkout build scripts
        uses: actions/checkout@v5
        with:
          repository: JulienChebance/Restfox.Light
          path: build

      - name: Checkout Restfox sources
        uses: actions/checkout@v5
        with:
          repository: flawiddsouza/Restfox
          path: Restfox

      - name: Use Node.js
        uses: actions/setup-node@v5
        with:
          node-version: latest

      - name: Install dependencies
        run: npm ci
        working-directory: Restfox/packages/ui

      - name: Create git tag then build UI
        shell: pwsh
        run: |
          cd Restfox
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # The git tag is only required for Vite tool
          git tag ${{ needs.check-version.outputs.latest_version }}
          cd packages\ui
          npm run build

      - name: Download and extract web2exe
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/JulienChebance/web2exe/releases/latest/download/web2exe.zip" -OutFile "web2exe.zip"
          Expand-Archive -Path "web2exe.zip" -DestinationPath "${{ env.DIST_DIR }}" -Force

      - name: Customize AssemblyInfo.cs
        shell: pwsh
        run: |
          $file = "${{ env.DIST_DIR }}/AssemblyInfo.cs"
          (Get-Content $file) `
            -replace '(?<=AssemblyTitle\(")[^"]+(?="\))', "${{ env.APP_TITLE }}" `
            -replace '(?<=AssemblyProduct\(")[^"]+(?="\))', "${{ env.APP_PRODUCT }}" `
            -replace '(?<=AssemblyCopyright\(")[^"]+(?="\))', "${{ env.APP_COPYRIGHT }}" `
            -replace '(?<=AssemblyVersion\(")[^"]+(?="\))', "${{ needs.check-version.outputs.latest_version_plain }}" `
            -replace '(?<=AssemblyFileVersion\(")[^"]+(?="\))', "${{ needs.check-version.outputs.latest_version_plain }}.0" `
            -replace '(?<=SPAmode\().*(?=\))', "${{ env.APP_SPAMODE }}" `
            -replace '(?<=StartMaximized\().*(?=\))', "${{ env.APP_STARTMAXIMIZED }}" `
            -replace '(?<=Kiosk\().*(?=\))', "${{ env.APP_KIOSK }}" `
            -replace '(?<=MultipleInstance\(")[^"]+(?="\))', "${{ env.APP_MULTIPLEINSTANCE }}" `
            -replace '(?<=Stateless\().*(?=\))', "${{ env.APP_STATELESS }}" `
            | Set-Content $file
            
      - name: Add notranslate meta tag to index.html, and hide Github Star element
        shell: pwsh
        run: |
          $indexPath = "${{ env.DIST_DIR }}/index.html"
          (Get-Content $indexPath) -replace '<head>', '<head><meta name="google" content="notranslate"><style>.github-star { display: none; }</style>' | Set-Content $indexPath

      - name: Copy and modify LICENSE
        shell: pwsh
        run: |
          Copy-Item "Restfox/LICENSE" "${{ env.DIST_DIR }}/LICENSE.txt" -Force
          (Get-Content "${{ env.DIST_DIR }}/LICENSE.txt") |
            ForEach-Object {
              $_
              if ($_ -match '^Copyright') {
                'Copyright (c) 2024+ Julien Chebance'
              }
            } | Set-Content "${{ env.DIST_DIR }}/LICENSE.txt"

      - name: Run web2exe compiler
        shell: pwsh
        working-directory: ${{ env.DIST_DIR }}
        run: pwsh "${{ github.workspace }}/build/scripts/build.ps1" -productName "${{ env.APP_PRODUCT }}"

      - name: Create archive
        uses: vimtor/action-zip@v1.2
        with:
          files: ${{ env.DIST_DIR }}/LICENSE.txt ${{ env.DIST_DIR }}/Restfox.exe
          dest: Restfox.Light.zip

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version.outputs.latest_version }}
          name: "Restfox Light ${{ needs.check-version.outputs.latest_version }}"
          files: Restfox.Light.zip

  workflow-keepalive:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Re-enable workflow
        shell: sh
        run: |
          case "${GITHUB_WORKFLOW_REF:?}" in
            "${GITHUB_REPOSITORY:?}"/.github/workflows/*.y*ml@*) ;;
            *) false ;;
          esac
          workflow="${GITHUB_WORKFLOW_REF%%@*}"
          workflow="${workflow#${GITHUB_REPOSITORY}/.github/workflows/}"
          gh api -X PUT "repos/${GITHUB_REPOSITORY}/actions/workflows/${workflow}/enable"
