name: Create new Windows Light release
on:
  workflow_dispatch:
  schedule:
    - cron: "50 3 * * *"
env:
  APP_TITLE: "A powerful minimalistic HTTP client"
  APP_PRODUCT: "Restfox"
  APP_COPYRIGHT: "Copyright (c) 2022 Flawid D'Souza - Copyright (c) 2024+ Julien Chebance"
  APP_SPAMODE: "true"
  APP_STARTMAXIMIZED: "false"
  APP_KIOSK: "false"
  APP_MULTIPLEINSTANCE: "unique"
  APP_STATELESS: "false"
jobs:
  build:
    runs-on: windows-latest
    steps:
      - id: distantVersion
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: flawiddsouza/Restfox
          excludes: prerelease, draft
      - id: localVersion
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: JulienChebance/Restfox.Light

      - name: Checkout Restfox sources
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        uses: actions/checkout@v5
        with:
          repository: flawiddsouza/Restfox
          path: Restfox

      - name: Use Node.js
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        uses: actions/setup-node@v5
        with:
          node-version: latest

      - name: Install dependencies
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        run: npm install
        working-directory: Restfox/packages/ui

      - name: Create local git tag
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        run: |
          cd Restfox
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # The git tag is only required for Vite tool
          git tag ${{ steps.distantVersion.outputs.release }}

      - name: Build UI
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        run: npm run build
        working-directory: Restfox/packages/ui

      - name: Add notranslate meta tag to index.html
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        run: |
          $indexPath = "Restfox/packages/ui/dist/index.html"
          (Get-Content $indexPath) -replace '<head>', '<head><meta name="google" content="notranslate">' | Set-Content $indexPath

      - name: Copy and modify LICENSE
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        run: |
          $src = "Restfox/LICENSE"
          $dest = "Restfox/packages/ui/dist/LICENSE.txt"
          Copy-Item $src $dest -Force

          $lines = Get-Content $dest
          $output = @()
          foreach ($line in $lines) {
            $output += $line
            if ($line -match '^Copyright') {
              $output += 'Copyright (c) 2024+ Julien Chebance`n'
            }
          }
          $output | Set-Content $dest

      - name: Download web2exe
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/JulienChebance/web2exe/releases/latest/download/web2exe.zip" -OutFile "web2exe.zip"

      - name: Extract web2exe
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        run: |
          Expand-Archive -Path "web2exe.zip" -DestinationPath "Restfox/packages/ui/dist" -Force

      - name: Customize AssemblyInfo.cs
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        run: |
          $file = "Restfox/packages/ui/dist/AssemblyInfo.cs"
          (Get-Content $file) `
            -replace '(?<=AssemblyTitle\(")[^"]+(?="\))', "${{ env.APP_TITLE }}" `
            -replace '(?<=AssemblyProduct\(")[^"]+(?="\))', "${{ env.APP_PRODUCT }}" `
            -replace '(?<=AssemblyCopyright\(")[^"]+(?="\))', "${{ env.APP_COPYRIGHT }}" `
            -replace '(?<=AssemblyVersion\(")[^"]+(?="\))', "${{ steps.distantVersion.outputs.release }}".TrimStart("v") `
            -replace '(?<=AssemblyFileVersion\(")[^"]+(?="\))', "${{ steps.distantVersion.outputs.release }}.0".TrimStart("v") `
            -replace '(?<=SPAmode\().*(?=\))', "${{ env.APP_SPAMODE }}" `
            -replace '(?<=StartMaximized\().*(?=\))', "${{ env.APP_STARTMAXIMIZED }}" `
            -replace '(?<=Kiosk\().*(?=\))', "${{ env.APP_KIOSK }}" `
            -replace '(?<=MultipleInstance\(")[^"]+(?="\))', "${{ env.APP_MULTIPLEINSTANCE }}" `
            -replace '(?<=Stateless\().*(?=\))', "${{ env.APP_STATELESS }}" `
            | Set-Content $file
            
      - name: List files in Restfox/packages/ui/dist
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        run: |
          Get-ChildItem -Path "Restfox/packages/ui/dist"

      - name: Run web2exe
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        shell: pwsh
        working-directory: Restfox/packages/ui/dist
        run: |
          # Get product name from AssemblyInfo.cs as the file name
          $filename = ""
          Get-Content .\AssemblyInfo.cs | ForEach-Object {
            if ($_ -match '^\[assembly:\s*AssemblyProduct\("(.+)"\)\]') {
              $filename = $matches[1]
            }
          }
          if ([string]::IsNullOrEmpty($filename)) {
            $filename = "web2exe"
          }

          # Remove unauthorized characters
          $filename = $filename -replace "[:/\\?]", ""

          # Générer la liste des ressources
          $resources = '/res:' + ((Get-ChildItem -Path .\ -Recurse -Exclude '*.exe', '*.cs', '*.bat' -File -Name | Select-String -Pattern '^\.' -NotMatch | ForEach-Object { '"' + $_ + '"' -replace '\\', '/' }) -Join ' /res:')

          Write-Host "Loaded resources: $resources"

          $icon = ""
          if (Test-Path ".\favicon.ico") {
            $icon = "/win32icon:favicon.ico"
          }

          # Compilation avec CSC
          $outFile = "$filename.exe"
          $csFiles = Get-ChildItem -Path . -Filter *.cs | ForEach-Object { $_.FullName }
          $csFilesArgs = $csFiles -join ' '

          $cmd = "$env:WINDIR\Microsoft.NET\Framework64\v4.0.30319\csc.exe /target:winexe -out:`"$outFile`" $csFilesArgs -optimize -nologo $icon $resources"
          Write-Host "Running: $cmd"
          Invoke-Expression $cmd

          if ($LASTEXITCODE -eq 0) {
            Write-Host "The following file has been successfully created:"
            Write-Host $outFile
          } else {
            Write-Error "CSC compilation failed with exit code $LASTEXITCODE"
          }

      - name: Compress
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        uses: vimtor/action-zip@v1.2
        with:
          files: Restfox/packages/ui/dist/LICENSE.txt Restfox/packages/ui/dist/Restfox.exe
          dest: Restfox.Light.zip

      - name: Release
        if: ${{ steps.distantVersion.outputs.release != steps.localVersion.outputs.release }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.distantVersion.outputs.release }}
          name: "Restfox Light ${{ steps.distantVersion.outputs.release }}"
          files: Restfox.Light.zip
